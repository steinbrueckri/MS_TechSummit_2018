version: '2.2'

volumes:
    prometheus_data: {}
    grafana_data: {}

networks:
  front-tier:
  back-tier:

services:
  prometheus:
    image: prom/prometheus
    volumes:
      - ./config/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090/tcp
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    depends_on:
      - cadvisor
    networks:
      - back-tier
    restart: always

  pushgateway:
    image: prom/pushgateway
    container_name: pushgateway
    ports:
      - 9091:9091/tcp
    networks:
      - back-tier
    restart: always

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100/tcp
    networks:
      - back-tier
    restart: always

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093/tcp
    volumes:
      - ./config/alertmanager/:/etc/alertmanager/
    networks:
      - back-tier
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  pushgateway:
    image: prom/pushgateway
    ports:
      - 9091:9091/tcp
    networks:
      - back-tier

  blackbox:
    image: prom/blackbox-exporter
    command: --config.file=/config/config.yml
    ports:
      - 9115:9115/tcp
    networks:
      - back-tier
    volumes:
      - ./config/blackbox/:/config

  dashboard:
    image: cloudflare/unsee
    environment:
      - ALERTMANAGER_URI=http://alertmanager:9093
    ports:
      - 5000:8080/tcp
    networks:
      - back-tier
    restart: always

  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8181:8080
    networks:
      - back-tier
    restart: always

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000/tcp
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./config/grafana/config.monitoring
    networks:
      - back-tier
      - front-tier
    restart: always

####
# APPs
####

  nodejs-app:
    build:
      context: demo-apps/nodejs-app/
      dockerfile: Dockerfile
    depends_on:
    - prometheus
    ports:
      - 3001:3001/tcp
    networks:
      - back-tier
      - front-tier
    restart: always

  bash-batch-job:
    build:
      context: demo-apps/bash-batch-job/
      dockerfile: Dockerfile
    depends_on:
    - pushgateway
    networks:
      - back-tier
      - front-tier
    restart: always

####
# Just Container for Testing Data
####

  trafficmaker-checkout:
    image: devth/alpine-bench
    depends_on:
      - prometheus
      - nodejs-app
    networks:
      - back-tier
      - front-tier
    restart: always
    command:
      '-n30 http://nodejs-app:3001/checkout'

  trafficmaker-bad:
    image: devth/alpine-bench
    depends_on:
      - prometheus
      - nodejs-app
    networks:
      - back-tier
      - front-tier
    restart: always
    command:
      '-n30 http://nodejs-app:3001/bad'

  trafficmaker-ok:
    image: devth/alpine-bench
    depends_on:
      - prometheus
      - nodejs-app
    networks:
      - back-tier
      - front-tier
    restart: always
    command:
      '-n30 http://nodejs-app:3001/ok'